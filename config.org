#+TITLE: Doom Emacs Configuration
#+AUTHOR: Andreas Nordland
#+PROPERTY: header-args :exports code :results silent :tangle yes :comment no
#+STARTUP: overview

#+BEGIN_SRC emacs-lisp

#+END_SRC

* Variable definitions (override in =local.el=)

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Andreas Nordland"
      user-mail-address "andreasnordland@gmail.com")
#+END_SRC

Various variable definitions

#+BEGIN_SRC emacs-lisp
  (defvar my/emacshome "~/.config/doom/" "emacs configuration files")
  (defvar my/emacslib "~/.config/doom/lisp/" "emacs libraries")
  (defvar my/local "~/.config/" "Local libraries")
  (defvar my/project-home "~/Projects/" "Personal project directory")
  (defvar my/base-directory "~/" "Base directory")
  ;; (defvar my/localbin (concat my/emacshome "bin/") "Primary binary path")
  ;; (defvar my/localscript (concat my/local "scripts/") "Primary script path")
  ;; (defvar my/homepage "http://www.holst.it" "Personal homepage")
  ;; (defvar my/snippets (concat my/project-home "Snippets/") "Code snippets directory")
  ;; (defvar my/bibliography-directory (concat my/project-home "Bibliography/") "Bibliography default path")
  ;; (defvar my/bibliography (expand-file-name (concat my/bibliography-directory "huge.bib")) "Primary bibtex file")
  ;; (defvar my/pdf-directory "~/Documents/PDF/" "Location of articles")
  ;; (doom/reload-env) ;; Seems to be necessary for now
  ;; (add-to-list 'load-path my/emacslib)
#+END_SRC

Org related directories
#+BEGIN_SRC emacs-lisp
  (setq org-directory (concat my/project-home "org/"))
  (setq org-project-directory org-directory)
  (setq org-roam-directory (concat org-project-directory "roam/"))
#+END_SRC


* Projects, Agenda

set method for obtaining files in a project.
#+BEGIN_SRC emacs-lisp
(setq projectile-indexing-method 'alien)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package! org-project
  :custom
  ;; If invoked outside of a project, prompt for a valid project to capture for
  (org-project-prompt-for-project t)

  ;; Store all TODOs in a ORG_DIRECTORY/project.org
  (org-project-todos-per-project nil)
  (org-project-todos-file (concat org-project-directory "/projects.org"))

  ;; Or use a single file per project, PROJECT_ROOT/todos.org
  ;; (org-project-todos-per-project t)
  ;; (org-project-per-project-file "todos.org")

  ;; Use custom capture templates
  (org-project-capture-template "* TODO %?\n%t\n") ;; Ask for a TODO and a date
  (org-project-quick-capture-template "* TODO %? %(org-insert-time-stamp (org-read-date nil t \"+2d\"))\n") ;; Quick TODOs ae scheduled in two days

  ;; Add some binding for org-project in project.el map
  :bind (:map project-prefix-map
              ("t" . org-project-quick-capture)
              ("T" . org-project-capture)
              ("o" . org-project-open-todos)))

  (map! :leader "n T" #'org-project-open-todos)
#+END_SRC


* Key Bindings

** Development

#+begin_src emacs-lisp
(defun my/rmd-export ()
"Export Rmd buffer to default html/pdf"
(interactive)
(save-buffer)
(let* ((buf (buffer-file-name))
       (out  (concat (file-name-base (buffer-file-name)) ".html"))
       (args (concat "'" buf "', output_format = NULL, knit_root_dir=getwd()"))
       (cmd (concat "rmarkdown::render(" args ")"))
       )
  ;; (ess-execute cmd)
  (message (concat "Processing " buf))
  (ess-eval-linewise cmd)
  (message (concat "Written to " out))
  )
)
#+end_src

#+BEGIN_SRC emacs-lisp
(setq avy-all-windows t)
;;(global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-1)
(map! :leader
      ;; "c p" #'ivy-push-view
      ;; "c P" #'ivy-pop-view
      "SPC" #'avy-goto-word-or-subword-1
      "O" #'ace-window)
#+END_SRC
